---
export const prerender = true;

import Layout from "@layouts/ArticleLayout.astro";
import Container from "@components/container.astro";
import TLDR from "@components/article/TLDR.astro";
import PodcastPlayer from "@components/article/PodcastPlayer.astro";
import PostComments from "@components/article/PostComments.astro";
import RelatedArticles from "@components/article/relatedArticles.astro";
import AuthorBio from "@components/article/authorCard.astro";
import { getPublishedArticles, getTopics, getCategories, getTeam, mainLanguages, generateArticleImage, baseURL  } from "@utils/utils.js";
import TOC from "@components/article/TOC.astro";

export async function getStaticPaths() {
  const articles = (await getPublishedArticles()).filter((post) => post.data?.url);
  const allAuthors = await getTeam();
  // const allTopics = await getDataCollection("topics");
  const allTopics = await getTopics();

  const allCategories = await getCategories();
  const relatedArticles = (post) => articles.filter((ar) => {
    let langmatch = (post.data.language) === (ar.data.language);
    return langmatch && ar.id!=post.id && ar.data.topics && ar.data.topics.some((topic) => post.data?.topics?.includes(topic))
  });
  const translations = (post) => articles.filter((ar) => ar.id.split('/')[0] === post.id.split('/')[0]);
  return articles.map((post) => {
    return {
      params: { slug: post.data?.url },
      props: {
        post,
        author: allAuthors.find((author) => author.id === post.data?.author),
        category: allCategories.find((cat) => cat.id === post.data?.category),
        topics: allTopics.filter((topic) => post.data?.topics?.includes(topic.id)),
        related: relatedArticles(post),
        translations: translations(post),
       } };
  });
}

const { post } = Astro.props; // Get the post directly from the prop on render
const { Content, headings } = await post.render();
const { author, category, topics, related, translations } = Astro.props;

const language = post.data.language || "en";
const dir = mainLanguages[language].dir;
const base_url = baseURL(Astro);

const cover_image = await generateArticleImage(post.data.image?.src, post, base_url, 957,384,'webp',90);

---
<Layout post={post} author={author} category={category} language={language}>

<div class="grid grid-cols-[5px_auto_5px] md:grid-cols-[240px_auto_5px] lg:grid-cols-[240px_auto_220px] relative ">
<div class="left-column relative ">
  <TOC headings={headings}/>
</div>
<div class="content relative " lang={language} dir={dir}>

  <Container class="max-w-screen">

    <div class="mx-auto max-w-3xl text-center mt-3">
      <span class="text-blue-500 uppercase tracking-wider text-sm font-medium">
        <a href={`/categories/${category?.id}`} aria-label={category?.data?.category}>{category?.data?.category}</a>
      </span>
      <h1 class="text-3xl lg:text-4xl font-bold lg:tracking-tight mt-1 lg:leading-tight"> {post.data?.title} </h1>
      <div class="flex gap-2 mt-3 items-center justify-center text-sm flex-wrap">
        <div class="name-date">
          {!!author && (
            <span class="text-slate-500">
              <a href={`/authors/${author?.id}`} aria-label={author?.data.name}> {author?.data.name} </a>
            </span>
            <span class="text-slate-500">â€¢</span>
          )}
          <time class="text-slate-500" datetime={post.data?.datePublished?.toISOString()}>
            {post.data?.datePublished?.toDateString()}
          </time>
        </div>
        <div class="w-full md:w-auto flex flex-wrap justify-center gap-1 p-0 m-0 !line-clamp-2">
          {topics && topics.map((topic) => (
            <span class="text-sm text-slate-500">
              #<a href={`/topics/${topic.id}`} aria-label={topic.name}>{topic.name}</a>
            </span>
          ))}
        </div>
      </div>
    </div>

    <div class="mx-auto max-w-10xl">
      <div class="relative pt-[40%] rounded-xl mt-6 overflow-hidden shadow-xl border border-gray-200" >

        <!-- transition:name={`post-img-${post.data.url}`}  -->

        <img {...cover_image} class="cover-image absolute top-0 left-0 w-full h-full object-cover" />

        <!-- {!!post.data?.image && (
        <Picture class="cover-image absolute top-0 left-0 w-full h-full object-cover"
          formats={["webp", "jpg"]}
          src={post.data?.image?.src}
          alt={post.data?.image?.alt}
          width="760" quality="low"
          // transition:name={`post-img-${post.slug}`}
          widths={[120, 188, 300, 372, 788, 1000, 1280]}
         /> )} -->
      </div>
     </div>

     <div class="max-w-3xl mx-auto">
       <TLDR meta={post.data}  />
     </div>

     <div class="max-w-3xl mx-auto">
       {!!post.data?.audio &&
         <PodcastPlayer meta={post.data} slug={post.data?.url} author={author} />  }
     </div>

     <div class="prose mx-auto mt-6 max-w-3xl prose-headings:mb-2 prose-headings:mt-8"
     >

     <Content meta={post.data} />
    </div>

     {!!author &&
      <div class="max-w-3xl mx-auto">
       <AuthorBio slug={post.data?.author} size="bio" author={author} />
      </div>
     }

     <div class="hidden md:block max-w-3xl mx-auto relative">
      <!-- commented out until we move comments to the db  -->
       <PostComments post={post} />
     </div>

  </Container>


</div>
<div class="right-column text-center relative ">
  <div class="hidden lg:block ">
    <RelatedArticles slug={post.data.url} related={related} translations={translations} />
  </div>
</div>
</div>
</Layout>
