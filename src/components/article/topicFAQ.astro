---

 const max = Astro.props.max || 10;
 const faqs   = Astro.props.faqs.data;
 faqs.faqs = faqs.faqs.slice(0, max); //  console.log('faqs length', faqs.faqs.length, max);

 import brand from "../../data/branding.json";
 import { Image } from 'astro:assets';
 import faqimage from '../../assets/faq.jpg';
 import q from '../../assets/q.png';
 import { getArticleURL} from '../../utils/utils.js';

//  const pageTitle =
const pageURL = getArticleURL(Astro);
// const pageURL = Astro.url.href.replace('[::1]', 'localhost').replace(/\/$/, '') //.replace(/:(\d+)/, ':3000')
const siteURL = new URL(pageURL).origin.replace(/\/$/, '');
const uniqueID = 'id-' + Math.random().toString(36).slice(2, 11);
const datePublished = new Date()
const dateModified = new Date()

// change faqs.faqs.resources array to absolute links if they are relative
faqs.faqs.forEach(faq => {
  if (faq.resources && faq.resources.length > 0) {
    faq.resources = faq.resources.map(resource => {
      if (resource.startsWith('/')) {
        return `${siteURL}${resource}`;
      }
      return resource;
    });
  }
});

 // JSON-LD for this FAQ Page
 const schema = {
  '@context': 'https://schema.org',
  '@type': 'FAQPage',
  '@id': `${pageURL}#${uniqueID}`,
  name: faqs.title,
  description: faqs.description,
  mainEntity: faqs.faqs.map(faq => {
    let answerText = faq.answer;
    // Append resources to the answer text, if available
    if (faq.resources && faq.resources.length > 0) {
      const resourcesText = faq.resources.map(url => `<a href="${url}">${
        (new URL(url)).pathname.split('/').pop()
      }</a>`).join(', ');
      answerText += `<p>Additional Resources: ${resourcesText}</p>`;
    }
    return {
      '@type': 'Question',
      name: faq.question,
      acceptedAnswer: {
        '@type': 'Answer',
        text: answerText,
      }
    };
  }),
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': pageURL,
  },
  publisher: {
    '@type': 'Organization',
    name: brand.site,
    logo: {
      '@type': 'ImageObject',
      url: brand.logo,
    },
  },
  datePublished: datePublished.toISOString(),
  dateModified: dateModified.toISOString(), // if available
};


// console.log(JSON.stringify(schema, null, 2));
---

<div id={uniqueID} class="container mx-auto p-4">
 <Image class="faqimage mx-auto opacity-50" src={faqimage} alt="faqs" height="150"
 widths={[150, 188, 300, 372, 788, 1000, 1280]}
 />
 <h1 class="text-2xl font-bold text-center">{faqs.title}</h1>
 <p class="text-gray-600 text-center">{faqs.description}</p>
 {faqs.faqs.map((faq, index) => (
   <div class="p-4 bg-gray-100 rounded-lg mt-4">
     <h2 class="faq-question text-lg font-semibold text-blue-600 cursor-pointer relative" data-target={`faq-answer-${index}`}>
      <Image class="qimage absolute -top-2 -left-6 opacity-50" src={q} alt=""
        height="40" width="40" />
      <span class="ml-6">{faq.question}</span>
     </h2>
     <div id={`faq-answer-${index}`} class="hidden mt-2 text-gray-700">
       <p class="">{faq.answer}</p>
       {faq.resources && faq.resources.length > 0 && (
         <div class="mt-3">
           <h4 class="text-md font-semibold">Resources:</h4>
           <ul class="list-disc list-inside pl-4">
             {faq.resources.map((resource) => (
               <li class="relative">
               <a href={resource} aria-label={resource} class="text-blue-500 hover:underline">{
                 (new URL(resource)).pathname.split('/').pop()
              }</a></li>
             ))}
           </ul>
         </div>
       )}
     </div>
   </div>
 ))}
</div>
<script type="application/ld+json" set:html={JSON.stringify(schema)} />


<script>
 document.querySelectorAll('.faq-question').forEach(element => {
   element.addEventListener('click', () => {
     const targetId = element.getAttribute('data-target');
     const targetElement = document.getElementById(targetId);
     if (targetElement) {
       targetElement.classList.toggle('hidden');
     }
   });
 });
</script>